// gShell is licensed under the GNU GENERAL PUBLIC LICENSE, Version 3
//
// http://www.gnu.org/licenses/gpl-3.0.en.html
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
// gShell is based upon https://github.com/google/google-api-dotnet-client, which is licensed under the Apache 2.0
// license: https://github.com/google/google-api-dotnet-client/blob/master/LICENSE
//
// gShell is reliant upon the Google Apis. Please see the specific API pages for specific licensing information.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a fork of google-apis-code-generator:
//       https://github.com/squid808/apis-client-generator
//
//     How neat is that? Pretty neat.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Management.Automation;
using Google.Apis.Calendar.v3;
using Google.Apis.Calendar.v3.Data;
using gCalendar = gShell.dotNet.Calendar;

namespace gShell.Cmdlets.Calendar
{
    /// <summary>A base class which provides support for service account integration and schema objects.</summary>
    public abstract class CalendarServiceAccountBase : CalendarBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">The email account to be targeted by the service account.</para>
        /// </summary>
        [Parameter(Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string TargetUserEmail { get; set; }

        #endregion

        protected override void BeginProcessing()
        {
            gShellServiceAccount = TargetUserEmail;

            base.BeginProcessing();
        }
    }

}

namespace gShell.Cmdlets.Calendar.Acl
{
    /// <summary>
    /// <para type="synopsis">Deletes an access control rule.</para>
    /// <para type="description">Deletes an access control rule.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Remove-GCalendarAcl -CalendarId $SomeCalendarIdString -RuleId $SomeRuleIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Remove-GCalendarAcl">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Remove, "GCalendarAcl",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Remove-GCalendarAcl")]
    public class RemoveGCalendarAclCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">ACL rule identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "ACL rule identifier.")]
        public string RuleId { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Acl", "Remove-GCalendarAcl"))
            {
                acl.Delete(CalendarId, RuleId);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Returns an access control rule.</para>
    /// <para type="description">Returns an access control rule.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarAcl -CalendarId $SomeCalendarIdString -RuleId $SomeRuleIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarAcl -CalendarId $SomeCalendarIdString -All</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarAcl">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarAcl",
        SupportsShouldProcess = true,
        DefaultParameterSetName = "one",
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarAcl")]
    public class GetGCalendarAclCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">ACL rule identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            ParameterSetName = "one",
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "ACL rule identifier.")]
        public string RuleId { get; set; }

        /// <summary>
        /// <para type="description">A switch to list all results</para>
        /// </summary>
        [Parameter(Position = 2,
        Mandatory = true,
        ParameterSetName = "list",
        HelpMessage = "A switch to list all results.")]
        public SwitchParameter All { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to \"none\". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False."
            )]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 4,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Acl", "Get-GCalendarAcl"))
            {
                if (ParameterSetName == "one")
                {
                    WriteObject(acl.Get(CalendarId, RuleId));
                }
                else
                {
                    var properties = new gCalendar.Acl.AclListProperties
                    {
                        ShowDeleted = ShowDeleted,
                        SyncToken = SyncToken
                    };

                    if (MaxResults.HasValue) properties.TotalResults = MaxResults.Value;

                    WriteObject(acl.List(CalendarId, properties));
                }
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates an access control rule.</para>
    /// <para type="description">Creates an access control rule.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>New-GCalendarAcl -CalendarId $SomeCalendarIdString -AclRuleBody $SomeAclRuleObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarAcl">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarAcl",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarAcl")]
    public class NewGCalendarAclCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }


        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public AclRule AclRuleBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Acl", "New-GCalendarAcl"))
            {
                WriteObject(acl.Insert(AclRuleBody, CalendarId));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Updates an access control rule. This method supports patch semantics.</para>
    /// <para type="description">Updates an access control rule. This method supports patch semantics.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Set-GCalendarAcl -CalendarId $SomeCalendarIdString -RuleId $SomeRuleIdString -AclRuleBody $SomeAclRuleObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Set-GCalendarAcl">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Set, "GCalendarAcl",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Set-GCalendarAcl")]
    public class SetGCalendarAclCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">ACL rule identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "ACL rule identifier.")]
        public string RuleId { get; set; }


        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public AclRule AclRuleBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Acl", "Set-GCalendarAcl"))
            {
                WriteObject(acl.Patch(AclRuleBody, CalendarId, RuleId));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Watch for changes to ACL resources.</para>
    /// <para type="description">Watch for changes to ACL resources.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Watch-GCalendarAcl -CalendarId $SomeCalendarIdString -ChannelBody $SomeChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Watch-GCalendarAcl">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Watch, "GCalendarAcl",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Watch-GCalendarAcl")]
    public class WatchGCalendarAclCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }


        [Parameter(Position = 0,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Channel ChannelBody { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to \"none\". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False."
            )]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Acl", "Watch-GCalendarAcl"))
            {
                var properties = new gCalendar.Acl.AclWatchProperties
                {
                    ShowDeleted = ShowDeleted,
                    SyncToken = SyncToken
                };


                WriteObject(acl.Watch(ChannelBody, CalendarId, properties));
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.CalendarList
{
    /// <summary>
    /// <para type="synopsis">Deletes an entry on the user's calendar list.</para>
    /// <para type="description">Deletes an entry on the user's calendar list.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Remove-GCalendarCalendarList -CalendarId $SomeCalendarIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Remove-GCalendarCalendarList">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Remove, "GCalendarCalendarList",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Remove-GCalendarCalendarList")]
    public class RemoveGCalendarCalendarListCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar CalendarList", "Remove-GCalendarCalendarList"))
            {
                calendarList.Delete(CalendarId);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Returns an entry on the user's calendar list.</para>
    /// <para type="description">Returns an entry on the user's calendar list.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarCalendarList -CalendarId $SomeCalendarIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarCalendarList -All</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarCalendarList">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarCalendarList",
        SupportsShouldProcess = true,
        DefaultParameterSetName = "one",
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarCalendarList")]
    public class GetGCalendarCalendarListCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            ParameterSetName = "one",
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">A switch to list all results</para>
        /// </summary>
        [Parameter(Position = 0,
        Mandatory = true,
        ParameterSetName = "list",
        HelpMessage = "A switch to list all results.")]
        public SwitchParameter All { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 1,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">The minimum access role for the user in the returned entries. Optional. The default is no restriction.</para>
        /// </summary>
        [Parameter(Position = 2,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The minimum access role for the user in the returned entries. Optional. The default is no restriction."
            )]
        public CalendarListResource.ListRequest.MinAccessRoleEnum? MinAccessRole { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted calendar list entries in the result. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted calendar list entries in the result. Optional. The default is False.")]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Whether to show hidden entries. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 4,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Whether to show hidden entries. Optional. The default is False.")]
        public bool? ShowHidden { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 5,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.\nTo ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar CalendarList", "Get-GCalendarCalendarList"))
            {
                if (ParameterSetName == "one")
                {
                    WriteObject(calendarList.Get(CalendarId));
                }
                else
                {
                    var properties = new gCalendar.CalendarList.CalendarListListProperties
                    {
                        MinAccessRole = MinAccessRole,
                        ShowDeleted = ShowDeleted,
                        ShowHidden = ShowHidden,
                        SyncToken = SyncToken
                    };

                    if (MaxResults.HasValue) properties.TotalResults = MaxResults.Value;

                    WriteObject(calendarList.List(properties));
                }
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Adds an entry to the user's calendar list.</para>
    /// <para type="description">Adds an entry to the user's calendar list.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>New-GCalendarCalendarList -CalendarListEntryBody $SomeCalendarListEntryObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarCalendarList">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarCalendarList",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarCalendarList")]
    public class NewGCalendarCalendarListCommand : CalendarServiceAccountBase
    {
        #region Properties

        [Parameter(Position = 1,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public CalendarListEntry CalendarListEntryBody { get; set; }

        /// <summary>
        /// <para type="description">Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False."
            )]
        public bool? ColorRgbFormat { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar CalendarList", "New-GCalendarCalendarList"))
            {
                var properties = new gCalendar.CalendarList.CalendarListInsertProperties
                {
                    ColorRgbFormat = ColorRgbFormat
                };


                WriteObject(calendarList.Insert(CalendarListEntryBody, properties));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Updates an entry on the user's calendar list. This method supports patch semantics.</para>
    /// <para type="description">Updates an entry on the user's calendar list. This method supports patch semantics.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Set-GCalendarCalendarList -CalendarId $SomeCalendarIdString -CalendarListEntryBody $SomeCalendarListEntryObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Set-GCalendarCalendarList">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Set, "GCalendarCalendarList",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Set-GCalendarCalendarList")]
    public class SetGCalendarCalendarListCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }


        [Parameter(Position = 1,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public CalendarListEntry CalendarListEntryBody { get; set; }

        /// <summary>
        /// <para type="description">Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False."
            )]
        public bool? ColorRgbFormat { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar CalendarList", "Set-GCalendarCalendarList"))
            {
                var properties = new gCalendar.CalendarList.CalendarListPatchProperties
                {
                    ColorRgbFormat = ColorRgbFormat
                };


                WriteObject(calendarList.Patch(CalendarListEntryBody, CalendarId, properties));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Watch for changes to CalendarList resources.</para>
    /// <para type="description">Watch for changes to CalendarList resources.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Watch-GCalendarCalendarList -ChannelBody $SomeChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Watch-GCalendarCalendarList">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Watch, "GCalendarCalendarList",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Watch-GCalendarCalendarList")]
    public class WatchGCalendarCalendarListCommand : CalendarServiceAccountBase
    {
        #region Properties

        [Parameter(Position = 0,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Channel ChannelBody { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">The minimum access role for the user in the returned entries. Optional. The default is no restriction.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The minimum access role for the user in the returned entries. Optional. The default is no restriction."
            )]
        public CalendarListResource.WatchRequest.MinAccessRoleEnum? MinAccessRole { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted calendar list entries in the result. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted calendar list entries in the result. Optional. The default is False.")]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Whether to show hidden entries. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Whether to show hidden entries. Optional. The default is False.")]
        public bool? ShowHidden { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.\nTo ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar CalendarList", "Watch-GCalendarCalendarList"))
            {
                var properties = new gCalendar.CalendarList.CalendarListWatchProperties
                {
                    MinAccessRole = MinAccessRole,
                    ShowDeleted = ShowDeleted,
                    ShowHidden = ShowHidden,
                    SyncToken = SyncToken
                };


                WriteObject(calendarList.Watch(ChannelBody, properties));
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Calendars
{
    /// <summary>
    /// <para type="synopsis">Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.</para>
    /// <para type="description">Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Clear-GCalendarCalendars -CalendarId $SomeCalendarIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Clear-GCalendarCalendars">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Clear, "GCalendarCalendars",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Clear-GCalendarCalendars")]
    public class ClearGCalendarCalendarsCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Calendars", "Clear-GCalendarCalendars"))
            {
                calendars.Clear(CalendarId);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.</para>
    /// <para type="description">Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Remove-GCalendarCalendars -CalendarId $SomeCalendarIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Remove-GCalendarCalendars">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Remove, "GCalendarCalendars",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Remove-GCalendarCalendars")]
    public class RemoveGCalendarCalendarsCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Calendars", "Remove-GCalendarCalendars"))
            {
                calendars.Delete(CalendarId);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Returns metadata for a calendar.</para>
    /// <para type="description">Returns metadata for a calendar.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarCalendars -CalendarId $SomeCalendarIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarCalendars">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarCalendars",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarCalendars")]
    public class GetGCalendarCalendarsCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Calendars", "Get-GCalendarCalendars"))
            {
                WriteObject(calendars.Get(CalendarId));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates a secondary calendar.</para>
    /// <para type="description">Creates a secondary calendar.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>New-GCalendarCalendars -CalendarBody $SomeCalendarObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarCalendars">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarCalendars",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarCalendars")]
    public class NewGCalendarCalendarsCommand : CalendarServiceAccountBase
    {
        #region Properties

        [Parameter(Position = 1,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Google.Apis.Calendar.v3.Data.Calendar CalendarBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Calendars", "New-GCalendarCalendars"))
            {
                WriteObject(calendars.Insert(CalendarBody));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Updates metadata for a calendar. This method supports patch semantics.</para>
    /// <para type="description">Updates metadata for a calendar. This method supports patch semantics.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Set-GCalendarCalendars -CalendarId $SomeCalendarIdString -CalendarBody $SomeCalendarObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Set-GCalendarCalendars">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Set, "GCalendarCalendars",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Set-GCalendarCalendars")]
    public class SetGCalendarCalendarsCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }


        [Parameter(Position = 1,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Google.Apis.Calendar.v3.Data.Calendar CalendarBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Calendars", "Set-GCalendarCalendars"))
            {
                WriteObject(calendars.Patch(CalendarBody, CalendarId));
            }
        }
    }

}

namespace gShell.Cmdlets.Calendar.Channels
{
    /// <summary>
    /// <para type="synopsis">Stop watching resources through this channel</para>
    /// <para type="description">Stop watching resources through this channel</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Stop-GCalendarChannel -ChannelBody $SomeChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Stop-GCalendarChannel">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsLifecycle.Stop, "GCalendarChannel",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Stop-GCalendarChannel")]
    public class StopGCalendarChannelCommand : CalendarServiceAccountBase
    {
        #region Properties

        [Parameter(Position = 0,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Channel ChannelBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Channels", "Stop-GCalendarChannel"))
            {
                channels.Stop(ChannelBody);
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Colors
{
    /// <summary>
    /// <para type="synopsis">Returns the color definitions for calendars and events.</para>
    /// <para type="description">Returns the color definitions for calendars and events.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarColor</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarColor">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarColor",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarColor")]
    public class GetGCalendarColorCommand : CalendarServiceAccountBase
    {
        #region Properties

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Colors", "Get-GCalendarColor"))
            {
                WriteObject(colors.Get());
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Events
{
    /// <summary>
    /// <para type="synopsis">Deletes an event.</para>
    /// <para type="description">Deletes an event.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Remove-GCalendarEvent -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Remove-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Remove, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Remove-GCalendarEvent")]
    public class RemoveGCalendarEventCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Event identifier.")]
        public string EventId { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the deletion of the event. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the deletion of the event. Optional. The default is False.")]
        public bool? SendNotifications { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Remove-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsDeleteProperties
                {
                    SendNotifications = SendNotifications
                };


                events.Delete(CalendarId, EventId, properties);
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Returns an event.</para>
    /// <para type="description">Returns an event.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarEvent -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarEvent -CalendarId $SomeCalendarIdString -All</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarEvent",
        SupportsShouldProcess = true,
        DefaultParameterSetName = "one",
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarEvent")]
    public class GetGCalendarEventCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ParameterSetName = "one",
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Event identifier.")]
        public string EventId { get; set; }

        /// <summary>
        /// <para type="description">Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ParameterSetName = "one",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        [Parameter(Position = 1,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        public bool? AlwaysIncludeEmail { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Time zone used in the response. Optional. The default is the time zone of the calendar.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ParameterSetName = "one",
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Time zone used in the response. Optional. The default is the time zone of the calendar.")]
        [Parameter(Position = 15,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Time zone used in the response. Optional. The default is the time zone of the calendar.")]
        public string TimeZone { get; set; }

        /// <summary>
        /// <para type="description">Specifies event ID in the iCalendar format to be included in the response. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Specifies event ID in the iCalendar format to be included in the response. Optional.")]
        public string ICalUID { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">The order of the events returned in the result. Optional. The default is an unspecified, stable order.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The order of the events returned in the result. Optional. The default is an unspecified, stable order."
            )]
        public EventsResource.ListRequest.OrderByEnum? OrderBy { get; set; }

        /// <summary>
        /// <para type="description">Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.</para>
        /// </summary>
        [Parameter(Position = 6,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints."
            )]
        public string[] PrivateExtendedProperty { get; set; }

        /// <summary>
        /// <para type="description">Free text search terms to find events that match these terms in any field, except for extended properties. Optional.</para>
        /// </summary>
        [Parameter(Position = 7,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Free text search terms to find events that match these terms in any field, except for extended properties. Optional."
            )]
        public string Q { get; set; }

        /// <summary>
        /// <para type="description">Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.</para>
        /// </summary>
        [Parameter(Position = 8,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints."
            )]
        public string[] SharedExtendedProperty { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 9,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False."
            )]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Whether to include hidden invitations in the result. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 10,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Whether to include hidden invitations in the result. Optional. The default is False.")]
        public bool? ShowHiddenInvitations { get; set; }

        /// <summary>
        /// <para type="description">Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 11,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False."
            )]
        public bool? SingleEvents { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.These are:- iCalUID- orderBy- privateExtendedProperty- q- sharedExtendedProperty- timeMin- timeMax- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 12,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nThere are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.\n\nThese are: \n- iCalUID \n- orderBy \n- privateExtendedProperty \n- q \n- sharedExtendedProperty \n- timeMin \n- timeMax \n- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        /// <summary>
        /// <para type="description">Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</para>
        /// </summary>
        [Parameter(Position = 13,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored."
            )]
        public DateTime? TimeMax { get; set; }

        /// <summary>
        /// <para type="description">Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</para>
        /// </summary>
        [Parameter(Position = 14,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored."
            )]
        public DateTime? TimeMin { get; set; }

        /// <summary>
        /// <para type="description">Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.</para>
        /// </summary>
        [Parameter(Position = 16,
            Mandatory = false,
            ParameterSetName = "list",
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time."
            )]
        public DateTime? UpdatedMin { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Get-GCalendarEvent"))
            {
                if (ParameterSetName == "one")
                {
                    var properties = new gCalendar.Events.EventsGetProperties
                {
                    AlwaysIncludeEmail = AlwaysIncludeEmail,
                    MaxAttendees = MaxAttendees,
                    TimeZone = TimeZone
                };

                WriteObject(events.Get(CalendarId, EventId, properties));

                }
                else
                {
                    var properties = new gCalendar.Events.EventsListProperties
                    {
                        AlwaysIncludeEmail = AlwaysIncludeEmail,
                        ICalUID = ICalUID,
                        MaxAttendees = MaxAttendees,
                        OrderBy = OrderBy,
                        PrivateExtendedProperty = PrivateExtendedProperty,
                        Q = Q,
                        SharedExtendedProperty = SharedExtendedProperty,
                        ShowDeleted = ShowDeleted,
                        ShowHiddenInvitations = ShowHiddenInvitations,
                        SingleEvents = SingleEvents,
                        SyncToken = SyncToken,
                        TimeMax = TimeMax,
                        TimeMin = TimeMin,
                        TimeZone = TimeZone,
                        UpdatedMin = UpdatedMin
                    };

                    if (MaxResults.HasValue) properties.TotalResults = MaxResults.Value;

                    WriteObject(events.List(CalendarId, properties));
                }
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Imports an event. This operation is used to add a private copy of an existing event to a calendar.</para>
    /// <para type="description">Imports an event. This operation is used to add a private copy of an existing event to a calendar.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Import-GCalendarEvent -CalendarId $SomeCalendarIdString -EventBody $SomeEventObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Import-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsData.Import, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Import-GCalendarEvent")]
    public class ImportGCalendarEventCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }


        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Event EventBody { get; set; }

        /// <summary>
        /// <para type="description">Whether API client performing operation supports event attachments. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether API client performing operation supports event attachments. Optional. The default is False.")]
        public bool? SupportsAttachments { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Import-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsImportProperties
                {
                    SupportsAttachments = SupportsAttachments
                };


                WriteObject(events.Import(EventBody, CalendarId, properties));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates an event.</para>
    /// <para type="description">Creates an event.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>New-GCalendarEvent -CalendarId $SomeCalendarIdString -EventBody $SomeEventObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/New-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.New, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/New-GCalendarEvent")]
    public class NewGCalendarEventCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }


        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Event EventBody { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the creation of the new event. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the creation of the new event. Optional. The default is False.")]
        public bool? SendNotifications { get; set; }

        /// <summary>
        /// <para type="description">Whether API client performing operation supports event attachments. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether API client performing operation supports event attachments. Optional. The default is False.")]
        public bool? SupportsAttachments { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "New-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsInsertProperties
                {
                    MaxAttendees = MaxAttendees,
                    SendNotifications = SendNotifications,
                    SupportsAttachments = SupportsAttachments
                };


                WriteObject(events.Insert(EventBody, CalendarId, properties));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Returns instances of the specified recurring event.</para>
    /// <para type="description">Returns instances of the specified recurring event.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarEventInstance -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarEventInstance">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarEventInstance",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarEventInstance")]
    public class GetGCalendarEventInstanceCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Recurring event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Recurring event identifier.")]
        public string EventId { get; set; }

        /// <summary>
        /// <para type="description">Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        public bool? AlwaysIncludeEmail { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">The original start time of the instance in the result. Optional.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The original start time of the instance in the result. Optional.")]
        public string OriginalStart { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 6,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False."
            )]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.</para>
        /// </summary>
        [Parameter(Position = 7,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset."
            )]
        public DateTime? TimeMax { get; set; }

        /// <summary>
        /// <para type="description">Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.</para>
        /// </summary>
        [Parameter(Position = 8,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset."
            )]
        public DateTime? TimeMin { get; set; }

        /// <summary>
        /// <para type="description">Time zone used in the response. Optional. The default is the time zone of the calendar.</para>
        /// </summary>
        [Parameter(Position = 9,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Time zone used in the response. Optional. The default is the time zone of the calendar.")]
        public string TimeZone { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Get-GCalendarEventInstance"))
            {
                var properties = new gCalendar.Events.EventsInstancesProperties
                {
                    AlwaysIncludeEmail = AlwaysIncludeEmail,
                    MaxAttendees = MaxAttendees,
                    OriginalStart = OriginalStart,
                    ShowDeleted = ShowDeleted,
                    TimeMax = TimeMax,
                    TimeMin = TimeMin,
                    TimeZone = TimeZone
                };


                WriteObject(events.Instances(CalendarId, EventId, properties));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Moves an event to another calendar, i.e. changes an event's organizer.</para>
    /// <para type="description">Moves an event to another calendar, i.e. changes an event's organizer.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Move-GCalendarEvent -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString -Destination $SomeDestinationString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Move-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Move, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Move-GCalendarEvent")]
    public class MoveGCalendarEventCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier of the source calendar where the event currently is on.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Calendar identifier of the source calendar where the event currently is on.")]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Event identifier.")]
        public string EventId { get; set; }

        /// <summary>
        /// <para type="description">Calendar identifier of the target calendar where the event is to be moved to.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Calendar identifier of the target calendar where the event is to be moved to.")]
        public string Destination { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the change of the event's organizer. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the change of the event's organizer. Optional. The default is False."
            )]
        public bool? SendNotifications { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Move-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsMoveProperties
                {
                    SendNotifications = SendNotifications
                };


                WriteObject(events.Move(CalendarId, EventId, Destination, properties));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Updates an event. This method supports patch semantics.</para>
    /// <para type="description">Updates an event. This method supports patch semantics.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Set-GCalendarEvent -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString -EventBody $SomeEventObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Set-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Set, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Set-GCalendarEvent")]
    public class SetGCalendarEventCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Event identifier.")]
        public string EventId { get; set; }


        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Event EventBody { get; set; }

        /// <summary>
        /// <para type="description">Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        public bool? AlwaysIncludeEmail { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False."
            )]
        public bool? SendNotifications { get; set; }

        /// <summary>
        /// <para type="description">Whether API client performing operation supports event attachments. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 6,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether API client performing operation supports event attachments. Optional. The default is False.")]
        public bool? SupportsAttachments { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Set-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsPatchProperties
                {
                    AlwaysIncludeEmail = AlwaysIncludeEmail,
                    MaxAttendees = MaxAttendees,
                    SendNotifications = SendNotifications,
                    SupportsAttachments = SupportsAttachments
                };


                WriteObject(events.Patch(EventBody, CalendarId, EventId, properties));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Creates an event based on a simple text string.</para>
    /// <para type="description">Creates an event based on a simple text string.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Add-GCalendarEvent -CalendarId $SomeCalendarIdString -Text $SomeTextString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Add-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Add, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Add-GCalendarEvent")]
    public class AddGCalendarEventCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">The text describing the event to be created.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The text describing the event to be created.")]
        public string Text { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the creation of the event. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the creation of the event. Optional. The default is False.")]
        public bool? SendNotifications { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Add-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsQuickAddProperties
                {
                    SendNotifications = SendNotifications
                };


                WriteObject(events.QuickAdd(CalendarId, Text, properties));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Updates an event.</para>
    /// <para type="description">Updates an event.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Update-GCalendarEvent -CalendarId $SomeCalendarIdString -EventId $SomeEventIdString -EventBody $SomeEventObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Update-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsData.Update, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Update-GCalendarEvent")]
    public class UpdateGCalendarEventCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }

        /// <summary>
        /// <para type="description">Event identifier.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Event identifier.")]
        public string EventId { get; set; }


        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Event EventBody { get; set; }

        /// <summary>
        /// <para type="description">Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        public bool? AlwaysIncludeEmail { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False."
            )]
        public bool? SendNotifications { get; set; }

        /// <summary>
        /// <para type="description">Whether API client performing operation supports event attachments. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 6,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether API client performing operation supports event attachments. Optional. The default is False.")]
        public bool? SupportsAttachments { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Update-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsUpdateProperties
                {
                    AlwaysIncludeEmail = AlwaysIncludeEmail,
                    MaxAttendees = MaxAttendees,
                    SendNotifications = SendNotifications,
                    SupportsAttachments = SupportsAttachments
                };


                WriteObject(events.Update(EventBody, CalendarId, EventId, properties));
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Watch for changes to Events resources.</para>
    /// <para type="description">Watch for changes to Events resources.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Watch-GCalendarEvent -CalendarId $SomeCalendarIdString -ChannelBody $SomeChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Watch-GCalendarEvent">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Watch, "GCalendarEvent",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Watch-GCalendarEvent")]
    public class WatchGCalendarEventCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.</para>
        /// </summary>
        [Parameter(Position = 0,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
            )]
        public string CalendarId { get; set; }


        [Parameter(Position = 0,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Channel ChannelBody { get; set; }

        /// <summary>
        /// <para type="description">Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False."
            )]
        public bool? AlwaysIncludeEmail { get; set; }

        /// <summary>
        /// <para type="description">Specifies event ID in the iCalendar format to be included in the response. Optional.</para>
        /// </summary>
        [Parameter(Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Specifies event ID in the iCalendar format to be included in the response. Optional.")]
        public string ICalUID { get; set; }

        /// <summary>
        /// <para type="description">The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.</para>
        /// </summary>
        [Parameter(Position = 4,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
            )]
        public int? MaxAttendees { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.</para>
        /// </summary>
        [Parameter(Position = 5,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">The order of the events returned in the result. Optional. The default is an unspecified, stable order.</para>
        /// </summary>
        [Parameter(Position = 6,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "The order of the events returned in the result. Optional. The default is an unspecified, stable order."
            )]
        public EventsResource.WatchRequest.OrderByEnum? OrderBy { get; set; }

        /// <summary>
        /// <para type="description">Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.</para>
        /// </summary>
        [Parameter(Position = 7,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints."
            )]
        public string[] PrivateExtendedProperty { get; set; }

        /// <summary>
        /// <para type="description">Free text search terms to find events that match these terms in any field, except for extended properties. Optional.</para>
        /// </summary>
        [Parameter(Position = 8,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Free text search terms to find events that match these terms in any field, except for extended properties. Optional."
            )]
        public string Q { get; set; }

        /// <summary>
        /// <para type="description">Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.</para>
        /// </summary>
        [Parameter(Position = 9,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints."
            )]
        public string[] SharedExtendedProperty { get; set; }

        /// <summary>
        /// <para type="description">Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 10,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False."
            )]
        public bool? ShowDeleted { get; set; }

        /// <summary>
        /// <para type="description">Whether to include hidden invitations in the result. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 11,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Whether to include hidden invitations in the result. Optional. The default is False.")]
        public bool? ShowHiddenInvitations { get; set; }

        /// <summary>
        /// <para type="description">Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.</para>
        /// </summary>
        [Parameter(Position = 12,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False."
            )]
        public bool? SingleEvents { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.These are:- iCalUID- orderBy- privateExtendedProperty- q- sharedExtendedProperty- timeMin- timeMax- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 13,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nThere are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.\n\nThese are: \n- iCalUID \n- orderBy \n- privateExtendedProperty \n- q \n- sharedExtendedProperty \n- timeMin \n- timeMax \n- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        /// <summary>
        /// <para type="description">Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</para>
        /// </summary>
        [Parameter(Position = 14,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored."
            )]
        public DateTime? TimeMax { get; set; }

        /// <summary>
        /// <para type="description">Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.</para>
        /// </summary>
        [Parameter(Position = 15,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored."
            )]
        public DateTime? TimeMin { get; set; }

        /// <summary>
        /// <para type="description">Time zone used in the response. Optional. The default is the time zone of the calendar.</para>
        /// </summary>
        [Parameter(Position = 16,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Time zone used in the response. Optional. The default is the time zone of the calendar.")]
        public string TimeZone { get; set; }

        /// <summary>
        /// <para type="description">Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.</para>
        /// </summary>
        [Parameter(Position = 17,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time."
            )]
        public DateTime? UpdatedMin { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Events", "Watch-GCalendarEvent"))
            {
                var properties = new gCalendar.Events.EventsWatchProperties
                {
                    AlwaysIncludeEmail = AlwaysIncludeEmail,
                    ICalUID = ICalUID,
                    MaxAttendees = MaxAttendees,
                    OrderBy = OrderBy,
                    PrivateExtendedProperty = PrivateExtendedProperty,
                    Q = Q,
                    SharedExtendedProperty = SharedExtendedProperty,
                    ShowDeleted = ShowDeleted,
                    ShowHiddenInvitations = ShowHiddenInvitations,
                    SingleEvents = SingleEvents,
                    SyncToken = SyncToken,
                    TimeMax = TimeMax,
                    TimeMin = TimeMin,
                    TimeZone = TimeZone,
                    UpdatedMin = UpdatedMin
                };


                WriteObject(events.Watch(ChannelBody, CalendarId, properties));
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Freebusy
{
    /// <summary>
    /// <para type="synopsis">Returns free/busy information for a set of calendars.</para>
    /// <para type="description">Returns free/busy information for a set of calendars.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarFreebusy -FreeBusyRequestBody $SomeFreeBusyRequestObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarFreebusy">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarFreebusy",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarFreebusy")]
    public class GetGCalendarFreebusyCommand : CalendarServiceAccountBase
    {
        #region Properties

        [Parameter(Position = 0,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public FreeBusyRequest FreeBusyRequestBody { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Freebusy", "Get-GCalendarFreebusy"))
            {
                WriteObject(freebusy.Query(FreeBusyRequestBody));
            }
        }
    }
}

namespace gShell.Cmdlets.Calendar.Settings
{
    /// <summary>
    /// <para type="synopsis">Returns a single user setting.</para>
    /// <para type="description">Returns a single user setting.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarSettings -Setting $SomeSettingString</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <example>
    ///   <code>PS C:\>Get-GCalendarSettings -All</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Get-GCalendarSettings">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Get, "GCalendarSettings",
        SupportsShouldProcess = true,
        DefaultParameterSetName = "one",
        HelpUri = @"https://github.com/squid808/gShell/wiki/Get-GCalendarSettings")]
    public class GetGCalendarSettingsCommand : CalendarServiceAccountBase
    {
        #region Properties

        /// <summary>
        /// <para type="description">The id of the user setting.</para>
        /// </summary>
        [Parameter(Position = 0,
            ParameterSetName = "one",
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The id of the user setting.")]
        public string Setting { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 0,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 1,
            ParameterSetName = "list",
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Settings", "Get-GCalendarSettings"))
            {
                if (ParameterSetName == "one")
                {
                    WriteObject(settings.Get(Setting));
                }
                else
                {
                    var properties = new gCalendar.Settings.SettingsListProperties
                    {
                        SyncToken = SyncToken
                    };

                    if (MaxResults.HasValue) properties.TotalResults = MaxResults.Value;

                    WriteObject(settings.List(properties));
                }
            }
        }
    }

    /// <summary>
    /// <para type="synopsis">Watch for changes to Settings resources.</para>
    /// <para type="description">Watch for changes to Settings resources.</para>
    /// <list type="alertSet"><item><term>About this Cmdlet</term><description>
    /// Part of the gShell Project, relating to the Google Calendar API; see Related Links or use the -Online parameter.
    /// </description></item></list>
    /// <example>
    ///   <code>PS C:\>Watch-GCalendarSettings -ChannelBody $SomeChannelObj</code>
    ///   <para>This automatically generated example serves to show the bare minimum required to call this Cmdlet.</para>
    ///   <para>Additional examples may be added, viewed and edited by users on the community wiki at the URL found in the related links.</para>
    /// </example>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Watch-GCalendarSettings">[Wiki page for this Cmdlet]</para>
    /// <para type="link" uri="https://github.com/squid808/gShell/wiki/Getting-Started">[Getting started with gShell]</para>
    /// </summary>
    [Cmdlet(VerbsCommon.Watch, "GCalendarSettings",
        SupportsShouldProcess = true,
        HelpUri = @"https://github.com/squid808/gShell/wiki/Watch-GCalendarSettings")]
    public class WatchGCalendarSettingsCommand : CalendarServiceAccountBase
    {
        #region Properties

        [Parameter(Position = 0,
            Mandatory = false,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public Channel ChannelBody { get; set; }

        /// <summary>
        /// <para type="description">Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.</para>
        /// </summary>
        [Parameter(Position = 1,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional."
            )]
        public int? MaxResults { get; set; }

        /// <summary>
        /// <para type="description">Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.Learn more about incremental synchronization.Optional. The default is to return all entries.</para>
        /// </summary>
        [Parameter(Position = 2,
            Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage =
                "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries."
            )]
        public string SyncToken { get; set; }

        #endregion

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Calendar Settings", "Watch-GCalendarSettings"))
            {
                var properties = new gCalendar.Settings.SettingsWatchProperties
                {
                    SyncToken = SyncToken
                };


                WriteObject(settings.Watch(ChannelBody, properties));
            }
        }
    }
}